#
# Cortus XC6SLX Evaluation Board with a single cpu.
#

# Set the instruction set. 
#
# ISA must be set to one of
#    apsv1  (all v1 cores such as aps1, aps3r, aps5, fps6 etc)
#    apsv2  (all v2 cores such as aps23, aps25, fsp26 etc)
#    aps3cd (aps3cd core)
#
# By default we use apsv1
#

puts "Connecting to Cortus XC6SLX Evaluation Board"

if { [info exists ISA] } {
} else {
  set ISA apsv1
}

transport select jtag

# 50 MHZ 
#adapter_khz 50000

gdb_port 3334
tcl_port 6667
telnet_port 4445

jtag newtap eval fpga -irlen 6 -expected-id 0x2400e093

#jtag newtap eval chip -irlen 8 -expected-id 0xc5045093

target create cpu cortus -endian little -chain-position eval.fpga

# This has to be defined before we do 'init'
# The parameters are:-
#    the name of the driver:  test
#    start address:           0x280000
#    size:                    0x180000
#    module width in bytes:   4
#    bus width in bytes:      4
#    name of target to use to program 
#    (from target command):   cpu
#flash bank flash apsspi 0x80000000 0x40000 4 4 cpu

# Probe for an OS
# NB this is only done once - so if you recompile the application
# you should restart openocd
#cpu configure -rtos auto
# Use cortus-rtos.cfg

# default value is apsv1
cpu configure -isa $ISA
puts "Set ISA to $ISA"

# Enable the debugger to see the mac registers
#cpu configure -has-mac 1

# default value is 0x02
cpu configure -ir-debug-opcode 0x02

# default value is same as coreid
cpu configure -dr-cpu-id 0

# default value is 0x50000000 + coreid * 0x1000
cpu configure -hw-brkpt-box-ad 0x50000000

# default value is 3
cpu configure -nr-hw-brkpts 3

# default value is 0x20 + coreid * 0x48
cpu configure -dbg-info-ad 0x20

# default value is 0 (false)
cpu configure -word-only-writes 0

# Allow 8 tck cycles after write operation for operation to
# complete before starting new one
cpu configure -memaccess-tck 8

if {$ISA == "rv32c"} {
      gdb_target_description disable
} else {
      gdb_target_description enable
}

gdb_flash_program enable

cpu configure -event gdb-attach {
      echo "Gdb has connected"
      # Reset and halt the board on attach
      # alternatively just halt without resetting
      reset halt
      echo "Processor has been reset and is halted"
}
cpu configure -event gdb-detach {
      echo "Gdb has disconnected"
      shutdown
}
cpu configure -event gdb-flash-erase-start {
      echo "Erasing flash...."
}
cpu configure -event gdb-flash-erase-end {
      echo "Finished erasing flash."
}
cpu configure -event gdb-flash-write-start {
      echo "Programming flash...."
}
cpu configure -event gdb-flash-write-end {
      echo "Finished programming flash."
}

init
reset halt
echo "Target ready..."
